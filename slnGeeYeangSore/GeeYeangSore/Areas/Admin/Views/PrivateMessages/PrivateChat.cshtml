@* 私人聊天記錄頁面 *@
@model IEnumerable<GeeYeangSore.Models.HMessage>
@{
    ViewData["Title"] = "詳細對話";
}
@functions {
    string GetUserName(int? userId, string role)
    {
        if (userId == null || string.IsNullOrEmpty(role))
            return "未知用戶";

        int id = userId.Value;
        role = role.Trim();

        if (role.Equals("Tenant", StringComparison.OrdinalIgnoreCase))
        {
            if (ViewBag.Tenants != null && ViewBag.Tenants.ContainsKey(id))
                return ViewBag.Tenants[id] + " (房客)";
            else
                return "未知房客";
        }
        else if (role.Equals("Landlord", StringComparison.OrdinalIgnoreCase))
        {
            if (ViewBag.Landlords != null && ViewBag.Landlords.ContainsKey(id))
                return ViewBag.Landlords[id] + " (房東)";
            else
                return "未知房東";
        }

        return "未知用戶";
    }

    string GetMessageStatus(GeeYeangSore.Models.HMessage message)
    {
        var report = message.HReports?.FirstOrDefault();
        var statusBadges = new List<string>();

        if (message.HIsDeleted == 1)
        {
            statusBadges.Add("<span class='badge bg-danger'>已刪除</span>");
        }
        if (message.HIsEdited == 1)
        {
            statusBadges.Add("<span class='badge bg-info'>已編輯</span>");
        }
        if (report != null)
        {
            var reportBadge = report.HStatus switch
            {
                "待處理" => "<span class='badge bg-warning'>檢舉待處理</span>",
                "已核准" => "<span class='badge bg-danger'>檢舉成立</span>",
                "已拒絕" => "<span class='badge bg-secondary'>檢舉駁回</span>",
                _ => "<span class='badge bg-warning'>檢舉待處理</span>"
            };
            statusBadges.Add(reportBadge);
        }

        return string.Join(" ", statusBadges);
    }

}
<style>
    #chat-container {
        height: 600px;
        overflow-y: auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .message-bubble {
        max-width: 70%;
        margin: 10px 0;
        padding: 10px;
        border-radius: 10px;
        position: relative;
    }

    .message-sender {
        margin-bottom: 5px;
        font-size: 0.9em;
        color: #666;
    }

    .message-time {
        font-size: 0.8em;
        color: #999;
        margin-top: 5px;
    }

    .message-status {
        margin-top: 5px;
    }

    .sender-message {
        background-color: #cce5ff;
        margin-left: auto;
    }

    .receiver-message {
        background-color: #d4edda;
        margin-right: auto;
    }

    .deleted-message {
        opacity: 0.7;
        background-color: #f8d7da;
    }

    .badge {
        margin-right: 5px;
    }

    #chat-container::-webkit-scrollbar {
        width: 6px;
    }

    #chat-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    #chat-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    #chat-container::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <a href="@Url.Action("Index")" class="btn btn-secondary">返回列表</a>
            </div>
        </div>
        <div class="card-body">
            <div id="chat-container">
                @foreach (var message in Model)
                                {
                                var isSender = message.HSenderId == ViewBag.SenderId;
                    var messageClass = isSender ? "sender-message" : "receiver-message";
                                if (message.HIsDeleted == 1)
                                {
                                messageClass += " deleted-message";
                                }

                <div class="message-bubble @messageClass">
                    <div class="message-sender">
                        @GetUserName(message.HSenderId, message.HSenderRole)
                    </div>
                    <div class="message-content">
                        @if (message.HIsDeleted == 1)
                        {
                            <span class="text-muted"><i>此訊息已被刪除</i></span>
                        }
                        else
                        {
                            @message.HContent
                        }
                    </div>
                    <div class="message-time">
                        @message.HTimestamp?.ToString("yyyy-MM-dd HH:mm")
                    </div>
                    <div class="message-status">
                        @Html.Raw(GetMessageStatus(message))
                    </div>
                </div>
                                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var chatContainer = document.getElementById('chat-container');
            chatContainer.scrollTop = chatContainer.scrollHeight;
        });
    </script>
}
